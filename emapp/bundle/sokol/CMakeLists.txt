option(NANOEM_ENABLE_SOKOL_GLES3_COMPAT "Enable building sokol_gles3 with compatibility profile" OFF)
option(NANOEM_ENABLE_SOKOL_WEBGPU "Enable building sokol_webgpu" OFF)

function(nanoem_emapp_build_sokol_noop)
  if(NOT NANOEM_ENABLE_STATIC_BUNDLE_PLUGIN)
    add_library(sokol_noop ${_library_type}
                ${CMAKE_CURRENT_SOURCE_DIR}/sokol_noop.c
                $<$<BOOL:${WIN32}>:${CMAKE_CURRENT_SOURCE_DIR}/sokol_noop.def>)
    set_property(TARGET sokol_noop PROPERTY FOLDER nanoem/sokol)
    target_include_directories(sokol_noop PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/dependencies)
    set_target_properties(sokol_noop PROPERTIES OUTPUT_NAME sokol_noop PREFIX "" DEFINE_SYMBOL "")
    nanoem_emapp_plugin_install(sokol_noop)
    message(STATUS "[emapp/bundle] setup sokol noop backend renderer plugin")
  endif()
endfunction()

function(nanoem_emapp_build_sokol_glcore33)
  if(NOT (NANOEM_ENABLE_STATIC_BUNDLE_PLUGIN OR (MSVC AND "${NANOEM_TARGET_ARCHITECTURE}" STREQUAL "arm64")))
    add_library(sokol_glcore33 ${_library_type}
                ${CMAKE_CURRENT_SOURCE_DIR}/sokol_glcore33.c
                $<$<BOOL:${WIN32}>:${CMAKE_CURRENT_SOURCE_DIR}/sokol_glcore33.def>)
    set_property(TARGET sokol_glcore33 PROPERTY FOLDER nanoem/sokol)
    target_compile_definitions(sokol_glcore33 PRIVATE SOKOL_DEBUG=$<BOOL:${SOKOL_ENABLE_DEBUG}> SOKOL_EXTERNAL_GL_LOADER)
    target_include_directories(sokol_glcore33 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/dependencies)
    set_target_properties(sokol_glcore33 PROPERTIES OUTPUT_NAME sokol_glcore33 PREFIX "" DEFINE_SYMBOL "")
    nanoem_emapp_plugin_install(sokol_glcore33)
    message(STATUS "[emapp/bundle] setup sokol OpenGL 3.3 Core Profile backend renderer plugin")
  endif()
endfunction()

function(nanoem_emapp_build_sokol_gles3)
  find_library(GLES3_LIBRARY_PATH NAMES GLESv3)
  find_path(GLES3_INCLUDE_DIR NAMES GLES3/gl3.h)
  mark_as_advanced(GLES3_LIBRARY_PATH GLES3_INCLUDE_DIR)
  if((NANOEM_ENABLE_SOKOL_GLES3_COMPAT OR EMSCRIPTEN) OR (GLES3_LIBRARY_PATH AND GLES3_INCLUDE_DIR) AND NOT APPLE)
    add_library(sokol_gles3 ${_library_type}
                ${CMAKE_CURRENT_SOURCE_DIR}/sokol_gles3.c
                $<$<BOOL:${WIN32}>:${CMAKE_CURRENT_SOURCE_DIR}/sokol_gles3.def>)
    set_property(TARGET sokol_gles3 PROPERTY FOLDER nanoem/sokol)
    target_compile_definitions(sokol_gles3 PRIVATE SOKOL_DEBUG=$<BOOL:${SOKOL_ENABLE_DEBUG}> $<$<BOOL:${NANOEM_ENABLE_SOKOL_GLES3_COMPAT}>:NANOEM_ENABLE_SOKOL_GLES3_COMPAT> SOKOL_EXTERNAL_GL_LOADER)
    target_include_directories(sokol_gles3 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/dependencies)
    set_target_properties(sokol_gles3 PROPERTIES OUTPUT_NAME sokol_gles3 PREFIX "" DEFINE_SYMBOL "")
    if(GLES3_INCLUDE_DIR)
      target_include_directories(sokol_gles3 PRIVATE ${GLES3_INCLUDE_DIR})
    endif()
    if(GLES3_LIBRARY_PATH)
      target_link_libraries(sokol_gles3 ${GLES3_LIBRARY_PATH})
    endif()
    nanoem_emapp_plugin_install(sokol_gles3)
    message(STATUS "[emapp/bundle] setup sokol OpenGL ES 3.0 backend renderer plugin")
  endif()
endfunction()

function(nanoem_emapp_build_sokol_d3d11)
  add_library(sokol_d3d11 ${_library_type}
              ${CMAKE_CURRENT_SOURCE_DIR}/sokol_d3d11.c
              ${CMAKE_CURRENT_SOURCE_DIR}/sokol_d3d11.def)
  set_property(TARGET sokol_d3d11 PROPERTY FOLDER nanoem/sokol)
  target_compile_definitions(sokol_d3d11 PRIVATE SOKOL_DEBUG=$<BOOL:${SOKOL_ENABLE_DEBUG}> SOKOL_STATIC=$<BOOL:${NANOEM_ENABLE_STATIC_BUNDLE_PLUGIN}> SOKOL_EXTERNAL_GL_LOADER)
  target_include_directories(sokol_d3d11 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/dependencies)
  set_target_properties(sokol_d3d11 PROPERTIES OUTPUT_NAME sokol_d3d11 PREFIX "" DEFINE_SYMBOL "")
  target_link_libraries(sokol_d3d11 d3d11 dxgi dxguid)
  nanoem_emapp_plugin_install(sokol_d3d11)
  message(STATUS "[emapp/bundle] setup sokol D3D11 backend renderer plugin")
endfunction()

function(nanoem_emapp_build_sokol_metal)
  add_library(sokol_metal_macos ${_library_type} ${CMAKE_CURRENT_SOURCE_DIR}/sokol_metal_$<IF:$<BOOL:${IOS}>,ios,macos>.m)
  set_property(TARGET sokol_metal_macos PROPERTY FOLDER nanoem/sokol)
  target_compile_definitions(sokol_metal_macos PRIVATE SOKOL_DEBUG=$<BOOL:${SOKOL_ENABLE_DEBUG}>)
  target_include_directories(sokol_metal_macos PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/dependencies)
  set_target_properties(sokol_metal_macos PROPERTIES OUTPUT_NAME sokol_metal_macos PREFIX "" DEFINE_SYMBOL "")
  target_link_libraries(sokol_metal_macos "-framework Metal")
  nanoem_emapp_plugin_install(sokol_metal_macos)
  message(STATUS "[emapp/bundle] setup sokol Metal backend renderer plugin")
endfunction()

function(nanoem_emapp_build_sokol_webgpu)
  if(NANOEM_ENABLE_SOKOL_WEBGPU)
    if(ON)
      set(DAWN_BASE_PATH ${PROJECT_SOURCE_DIR}/dependencies/dawn)
      file(GLOB_RECURSE DAWN_LIBRARIES_DEBUG ${DAWN_BASE_PATH}/out/Debug/src/*.a ${DAWN_BASE_PATH}/out/Debug/third_party/abseil/*.a)
      file(GLOB_RECURSE DAWN_LIBRARIES_RELEASE ${DAWN_BASE_PATH}/out/Release/src/*.a ${DAWN_BASE_PATH}/out/Release/third_party/abseil/*.a)
      find_path(WEBGPU_INCLUDE_DIR NAMES webgpu/webgpu.h PATH_SUFFIXES include PATHS ${DAWN_BASE_PATH})
      find_path(DAWN_WEBGPU_INCLUDE_DIR NAMES dawn/webgpu.h PATH_SUFFIXES out/Release/gen/include PATHS ${DAWN_BASE_PATH})
      mark_as_advanced(DAWN_LIBRARY_DEBUG DAWN_LIBRARY_RELEASE WEBGPU_INCLUDE_DIR)
      add_library(sokol_webgpu ${_library_type} ${CMAKE_CURRENT_SOURCE_DIR}/sokol_webgpu.c ${CMAKE_CURRENT_SOURCE_DIR}/sokol_webgpu_dawn.cc)
      set_property(TARGET sokol_webgpu PROPERTY FOLDER nanoem/sokol)
      target_compile_definitions(sokol_webgpu PRIVATE SOKOL_DEBUG=$<BOOL:${SOKOL_ENABLE_DEBUG}> SOKOL_WGPU_DAWN)
      target_include_directories(sokol_webgpu PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/dependencies ${WEBGPU_INCLUDE_DIR} ${DAWN_WEBGPU_INCLUDE_DIR})
      set_target_properties(sokol_webgpu PROPERTIES OUTPUT_NAME sokol_webgpu PREFIX "" DEFINE_SYMBOL "")
      target_link_libraries(sokol_webgpu
                            optimized ${DAWN_LIBRARIES_RELEASE}
                            debug ${DAWN_LIBRARIES_DEBUG})
      if(APPLE)
        target_link_libraries(sokol_webgpu "-framework Metal -framework QuartzCore -framework IOKit -framework IOSurface")
      endif()
    elseif(OFF)
      set(WEBGPU_HEADERS_PATH ${PROJECT_SOURCE_DIR}/dependencies/webgpu-headers)
      set(WGPU_NATIVE_BASE_PATH ${PROJECT_SOURCE_DIR}/dependencies/wgpu-native)
      find_library(WGPU_NATIVE_LIBRARY_DEBUG NAMES libwgpu_native.a webgpu_native PATH_SUFFIXES target/debug PATHS ${WGPU_NATIVE_BASE_PATH})
      find_library(WGPU_NATIVE_LIBRARY_RELEASE NAMES libwgpu_native.a webgpu_native PATH_SUFFIXES target/release PATHS ${WGPU_NATIVE_BASE_PATH})
      find_path(WEBGPU_INCLUDE_DIR NAMES webgpu.h PATHS ${WEBGPU_HEADERS_PATH})
      mark_as_advanced(WGPU_NATIVE_LIBRARY_DEBUG WGPU_NATIVE_LIBRARY_RELEASE WEBGPU_INCLUDE_DIR)
      add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/webgpu/webgpu.h
                         COMMAND ${CMAKE_COMMAND} ARGS -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/webgpu"
                         COMMAND ${CMAKE_COMMAND} ARGS -E copy_if_different "${WEBGPU_INCLUDE_DIR}/webgpu.h" "${CMAKE_CURRENT_BINARY_DIR}/webgpu/webgpu.h")
      add_library(sokol_webgpu ${_library_type} ${CMAKE_CURRENT_SOURCE_DIR}/sokol_webgpu.c ${CMAKE_CURRENT_BINARY_DIR}/webgpu/webgpu.h)
      set_property(TARGET sokol_webgpu PROPERTY FOLDER nanoem/sokol)
      target_compile_definitions(sokol_webgpu PRIVATE SOKOL_DEBUG=$<BOOL:${SOKOL_ENABLE_DEBUG}>)
      target_include_directories(sokol_webgpu PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/dependencies ${CMAKE_CURRENT_BINARY_DIR})
      set_target_properties(sokol_webgpu PROPERTIES OUTPUT_NAME sokol_webgpu PREFIX "" DEFINE_SYMBOL "")
      target_link_libraries(sokol_webgpu optimized ${WGPU_NATIVE_LIBRARY_RELEASE} debug ${WGPU_NATIVE_LIBRARY_DEBUG})
      if(APPLE)
        target_link_libraries(sokol_webgpu "-framework Metal -framework QuartzCore")
      endif()
    endif()
    nanoem_emapp_plugin_install(sokol_webgpu)
    message(STATUS "[emapp/bundle] setup sokol WebGPU backend renderer plugin")
  endif()
endfunction()

function(nanoem_emapp_build_sokol)
  nanoem_emapp_plugin_set_library_type()
  nanoem_emapp_build_sokol_noop()
  nanoem_emapp_build_sokol_glcore33()
  nanoem_emapp_build_sokol_gles3()
  nanoem_emapp_build_sokol_webgpu()
  if(WIN32)
    nanoem_emapp_build_sokol_d3d11()
    if(TARGET sokol_glcore33)
      target_link_libraries(sokol_glcore33 opengl32)
    endif()
    if(TARGET sokol_gles3)
      target_link_libraries(sokol_gles3 opengl32)
    endif()
  elseif(APPLE)
    nanoem_emapp_build_sokol_metal()
  endif()
endfunction()

nanoem_emapp_build_sokol()
