/*
   Copyright (c) 2015-2023 hkrn All rights reserved

   This file is part of emapp component and it's licensed under Mozilla Public License. see LICENSE.md for more details.
 */

#pragma once
#ifndef NANOEM_EMAPP_PLUGIN_MESHSYNCPLUGIN_H_
#define NANOEM_EMAPP_PLUGIN_MESHSYNCPLUGIN_H_

#include "emapp/plugin/BasePlugin.h"

namespace nanoem {
namespace plugin {

namespace ms {
struct ServerSettings;
struct Server;
struct GetMessage;
struct SetMessage;
struct FenceMessage;
struct TextMessage;
struct DeleteMessage;
struct SplitData;
struct Animation;
struct Transform;
struct TransformAnimation;
struct Camera;
struct CameraAnimation;
struct Material;
struct Light;
struct LightAnimation;
struct Mesh;
struct SubmeshData;
struct BlendShapeData;
struct Scene;
struct Weights4;
struct MessageType;
} /* namespace ms */

class MeshSyncPlugin NANOEM_DECL_SEALED : public BasePlugin {
public:
    MeshSyncPlugin(IEventPublisher *publisher);
    ~MeshSyncPlugin() NANOEM_DECL_NOEXCEPT;

    bool load(const URI &fileURI) NANOEM_DECL_OVERRIDE;
    void unload() NANOEM_DECL_OVERRIDE;
    bool create() NANOEM_DECL_OVERRIDE;
    void destroy() NANOEM_DECL_OVERRIDE;

    void start();
    void stop();

    const char *failureReason() const NANOEM_DECL_NOEXCEPT_OVERRIDE;
    const char *recoverySuggestion() const NANOEM_DECL_NOEXCEPT_OVERRIDE;

private:
    typedef const nanoem_f32_t *quatf;
    typedef const nanoem_f32_t *nanoem_f32_t2;
    typedef const nanoem_f32_t *nanoem_f32_t3;
    typedef const nanoem_f32_t *nanoem_f32_t4;
    typedef const nanoem_f32_t *nanoem_f32_t4x4;
    typedef void (*msMessageHandler)(ms::MessageType type, const void *data);
    typedef ms::Server *(APIENTRY *PFN_msServerStart)(const ms::ServerSettings *settings);
    typedef void(APIENTRY *PFN_msServerStop)(ms::Server *server);
    typedef int(APIENTRY *PFN_msServerGetNumMessages)(ms::Server *server);
    typedef int(APIENTRY *PFN_msServerProcessMessages)(ms::Server *server, msMessageHandler handler);
    typedef void(APIENTRY *PFN_msServerBeginServe)(ms::Server *server);
    typedef void(APIENTRY *PFN_msServerEndServe)(ms::Server *server);
    typedef void(APIENTRY *PFN_msServerServeTransform)(ms::Server *server, ms::Transform *data);
    typedef void(APIENTRY *PFN_msServerServeCamera)(ms::Server *server, ms::Camera *data);
    typedef void(APIENTRY *PFN_msServerServeLight)(ms::Server *server, ms::Light *data);
    typedef void(APIENTRY *PFN_msServerServeMesh)(ms::Server *server, ms::Mesh *data);
    typedef void(APIENTRY *PFN_msServerServeMaterial)(ms::Server *server, ms::Material *data);
    typedef void(APIENTRY *PFN_msServerSetScreenshotFilePath)(ms::Server *server, const char *path);
    typedef int(APIENTRY *PFN_msGetGetBakeSkin)(ms::GetMessage *_this);
    typedef int(APIENTRY *PFN_msGetGetBakeCloth)(ms::GetMessage *_this);
    typedef ms::Scene *(APIENTRY *PFN_msSetGetSceneData)(ms::SetMessage *_this);
    typedef ms::Material *(APIENTRY *PFN_msMaterialCreate)();
    typedef int(APIENTRY *PFN_msMaterialGetID)(ms::Material *_this);
    typedef void(APIENTRY *PFN_msMaterialSetID)(ms::Material *_this, int v);
    typedef const char *(APIENTRY *PFN_msMaterialGetName)(ms::Material *_this);
    typedef void(APIENTRY *PFN_msMaterialSetName)(ms::Material *_this, const char *v);
    typedef nanoem_f32_t4(APIENTRY *PFN_msMaterialGetColor)(ms::Material *_this);
    typedef void(APIENTRY *PFN_msMaterialSetColor)(ms::Material *_this, const nanoem_f32_t4 *v);
    typedef ms::TransformAnimation *(APIENTRY *PFN_msAnimationAsTransform)(ms::Animation *_this);
    typedef ms::CameraAnimation *(APIENTRY *PFN_msAnimationAsCamera)(ms::Animation *_this);
    typedef ms::LightAnimation *(APIENTRY *PFN_msAnimationAsLight)(ms::Animation *_this);
    typedef int(APIENTRY *PFN_msTransformAGetNumTranslationSamples)(ms::TransformAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msTransformAGetTranslationTime)(ms::TransformAnimation *_this, int i);
    typedef nanoem_f32_t3(APIENTRY *PFN_msTransformAGetTranslationValue)(ms::TransformAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msTransformAGetNumRotationSamples)(ms::TransformAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msTransformAGetRotationTime)(ms::TransformAnimation *_this, int i);
    typedef quatf(APIENTRY *PFN_msTransformAGetRotationValue)(ms::TransformAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msTransformAGetNumScaleSamples)(ms::TransformAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msTransformAGetScaleTime)(ms::TransformAnimation *_this, int i);
    typedef nanoem_f32_t3(APIENTRY *PFN_msTransformAGetScaleValue)(ms::TransformAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msTransformAGetNumVisibleSamples)(ms::TransformAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msTransformAGetVisibleTime)(ms::TransformAnimation *_this, int i);
    typedef bool(APIENTRY *PFN_msTransformAGetVisibleValue)(ms::TransformAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msCameraAGetNumFovSamples)(ms::CameraAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFovTime)(ms::CameraAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFovValue)(ms::CameraAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msCameraAGetNumNearSamples)(ms::CameraAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetNearTime)(ms::CameraAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetNearValue)(ms::CameraAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msCameraAGetNumFarSamples)(ms::CameraAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFarTime)(ms::CameraAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFarValue)(ms::CameraAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msCameraAGetNumHApertureSamples)(ms::CameraAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetHApertureTime)(ms::CameraAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetHApertureValue)(ms::CameraAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msCameraAGetNumVApertureSamples)(ms::CameraAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetVApertureTime)(ms::CameraAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetVApertureValue)(ms::CameraAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msCameraAGetNumFocalLengthSamples)(ms::CameraAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFocalLengthTime)(ms::CameraAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFocalLengthValue)(ms::CameraAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msCameraAGetNumFocusDistanceSamples)(ms::CameraAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFocusDistanceTime)(ms::CameraAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraAGetFocusDistanceValue)(ms::CameraAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msLightAGetNumColorSamples)(ms::LightAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightAGetColorTime)(ms::LightAnimation *_this, int i);
    typedef nanoem_f32_t4(APIENTRY *PFN_msLightAGetColorValue)(ms::LightAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msLightAGetNumIntensitySamples)(ms::LightAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightAGetIntensityTime)(ms::LightAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightAGetIntensityValue)(ms::LightAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msLightAGetNumRangeSamples)(ms::LightAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightAGetRangeTime)(ms::LightAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightAGetRangeValue)(ms::LightAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msLightAGetNumSpotAngleSamples)(ms::LightAnimation *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightAGetSpotAngleTime)(ms::LightAnimation *_this, int i);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightAGetSpotAngleValue)(ms::LightAnimation *_this, int i);
    typedef int(APIENTRY *PFN_msGetGetFlags)(ms::GetMessage *_this);
    typedef int(APIENTRY *PFN_msDeleteGetNumTargets)(ms::DeleteMessage *_this);
    typedef const char *(APIENTRY *PFN_msDeleteGetPath)(ms::DeleteMessage *_this, int i);
    typedef int(APIENTRY *PFN_msDeleteGetID)(ms::DeleteMessage *_this, int i);
    typedef int(APIENTRY *PFN_msFenceGetType)(ms::FenceMessage *_this);
    typedef const char *(APIENTRY *PFN_msTextGetText)(ms::TextMessage *_this);
    typedef int(APIENTRY *PFN_msTextGetType)(ms::TextMessage *_this);
    typedef ms::Transform *(APIENTRY *PFN_msTransformCreate)();
    typedef int(APIENTRY *PFN_msTransformGetID)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetID)(ms::Transform *_this, int v);
    typedef int(APIENTRY *PFN_msTransformGetIndex)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetIndex)(ms::Transform *_this, int v);
    typedef const char *(APIENTRY *PFN_msTransformGetPath)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetPath)(ms::Transform *_this, const char *v);
    typedef nanoem_f32_t3(APIENTRY *PFN_msTransformGetPosition)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetPosition)(ms::Transform *_this, nanoem_f32_t3 v);
    typedef quatf(APIENTRY *PFN_msTransformGetRotation)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetRotation)(ms::Transform *_this, quatf v);
    typedef nanoem_f32_t3(APIENTRY *PFN_msTransformGetScale)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetScale)(ms::Transform *_this, nanoem_f32_t3 v);
    typedef bool(APIENTRY *PFN_msTransformGetVisible)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetVisible)(ms::Transform *_this, bool v);
    typedef const char *(APIENTRY *PFN_msTransformGetReference)(ms::Transform *_this);
    typedef void(APIENTRY *PFN_msTransformSetReference)(ms::Transform *_this, const char *v);
    typedef ms::Animation *(APIENTRY *PFN_msTransformGetAnimation)(ms::Transform *_this);
    typedef ms::Camera *(APIENTRY *PFN_msCameraCreate)();
    typedef bool(APIENTRY *PFN_msCameraIsOrtho)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetOrtho)(ms::Camera *_this, bool v);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraGetFov)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetFov)(ms::Camera *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraGetNearPlane)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetNearPlane)(ms::Camera *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraGetFarPlane)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetFarPlane)(ms::Camera *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraGetHorizontalAperture)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetHorizontalAperture)(ms::Camera *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraGetVerticalAperture)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetVerticalAperture)(ms::Camera *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraGetFocalLength)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetFocalLength)(ms::Camera *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msCameraGetFocusDistance)(ms::Camera *_this);
    typedef void(APIENTRY *PFN_msCameraSetFocusDistance)(ms::Camera *_this, nanoem_f32_t v);
    typedef ms::Light *(APIENTRY *PFN_msLightCreate)();
    typedef int(APIENTRY *PFN_msLightGetType)(ms::Light *_this);
    typedef void(APIENTRY *PFN_msLightSetType)(ms::Light *_this, int v);
    typedef nanoem_f32_t4(APIENTRY *PFN_msLightGetColor)(ms::Light *_this);
    typedef void(APIENTRY *PFN_msLightSetColor)(ms::Light *_this, nanoem_f32_t4 v);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightGetIntensity)(ms::Light *_this);
    typedef void(APIENTRY *PFN_msLightSetIntensity)(ms::Light *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightGetRange)(ms::Light *_this);
    typedef void(APIENTRY *PFN_msLightSetRange)(ms::Light *_this, nanoem_f32_t v);
    typedef nanoem_f32_t(APIENTRY *PFN_msLightGetSpotAngle)(ms::Light *_this);
    typedef void(APIENTRY *PFN_msLightSetSpotAngle)(ms::Light *_this, nanoem_f32_t v);
    typedef ms::Mesh *(APIENTRY *PFN_msMeshCreate)();
    typedef int(APIENTRY *PFN_msMeshGetFlags)(ms::Mesh *_this);
    typedef void(APIENTRY *PFN_msMeshSetFlags)(ms::Mesh *_this, int v);
    typedef int(APIENTRY *PFN_msMeshGetNumPoints)(ms::Mesh *_this);
    typedef int(APIENTRY *PFN_msMeshGetNumIndices)(ms::Mesh *_this);
    typedef int(APIENTRY *PFN_msMeshGetNumSplits)(ms::Mesh *_this);
    typedef void(APIENTRY *PFN_msMeshReadPoints)(ms::Mesh *_this, nanoem_f32_t3 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshWritePoints)(ms::Mesh *_this, const nanoem_f32_t3 *v, int size);
    typedef void(APIENTRY *PFN_msMeshReadNormals)(ms::Mesh *_this, nanoem_f32_t3 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshWriteNormals)(ms::Mesh *_this, const nanoem_f32_t3 *v, int size);
    typedef void(APIENTRY *PFN_msMeshReadTangents)(ms::Mesh *_this, nanoem_f32_t4 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshWriteTangents)(ms::Mesh *_this, const nanoem_f32_t4 *v, int size);
    typedef void(APIENTRY *PFN_msMeshReadUV0)(ms::Mesh *_this, nanoem_f32_t2 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshReadUV1)(ms::Mesh *_this, nanoem_f32_t2 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshWriteUV0)(ms::Mesh *_this, const nanoem_f32_t2 *v, int size);
    typedef void(APIENTRY *PFN_msMeshWriteUV1)(ms::Mesh *_this, const nanoem_f32_t2 *v, int size);
    typedef void(APIENTRY *PFN_msMeshReadColors)(ms::Mesh *_this, nanoem_f32_t4 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshWriteColors)(ms::Mesh *_this, const nanoem_f32_t4 *v, int size);
    typedef void(APIENTRY *PFN_msMeshReadIndices)(ms::Mesh *_this, int *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshWriteIndices)(ms::Mesh *_this, const int *v, int size);
    typedef void(APIENTRY *PFN_msMeshWriteSubmeshTriangles)(ms::Mesh *_this, const int *v, int size, int materialID);
    typedef ms::SplitData *(APIENTRY *PFN_msMeshGetSplit)(ms::Mesh *_this, int i);
    typedef int(APIENTRY *PFN_msMeshGetNumSubmeshes)(ms::Mesh *_this);
    typedef ms::SubmeshData *(APIENTRY *PFN_msMeshGetSubmesh)(ms::Mesh *_this, int i);
    typedef void(APIENTRY *PFN_msMeshReadWeights4)(ms::Mesh *_this, ms::Weights4 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msMeshWriteWeights4)(ms::Mesh *_this, const ms::Weights4 *v, int size);
    typedef int(APIENTRY *PFN_msMeshGetNumBones)(ms::Mesh *_this);
    typedef const char *(APIENTRY *PFN_msMeshGetRootBonePath)(ms::Mesh *_this);
    typedef void(APIENTRY *PFN_msMeshSetRootBonePath)(ms::Mesh *_this, const char *v);
    typedef const char *(APIENTRY *PFN_msMeshGetBonePath)(ms::Mesh *_this, int i);
    typedef void(APIENTRY *PFN_msMeshSetBonePath)(ms::Mesh *_this, const char *v, int i);
    typedef void(APIENTRY *PFN_msMeshReadBindPoses)(ms::Mesh *_this, nanoem_f32_t4x4 *v);
    typedef void(APIENTRY *PFN_msMeshWriteBindPoses)(ms::Mesh *_this, const nanoem_f32_t4x4 *v, int size);
    typedef int(APIENTRY *PFN_msMeshGetNumBlendShapes)(ms::Mesh *_this);
    typedef ms::BlendShapeData *(APIENTRY *PFN_msMeshGetBlendShapeData)(ms::Mesh *_this, int i);
    typedef ms::BlendShapeData *(APIENTRY *PFN_msMeshAddBlendShape)(ms::Mesh *_this, const char *name);
    typedef void(APIENTRY *PFN_msMeshSetLocal2World)(ms::Mesh *_this, const nanoem_f32_t4x4 *v);
    typedef void(APIENTRY *PFN_msMeshSetWorld2Local)(ms::Mesh *_this, const nanoem_f32_t4x4 *v);
    typedef int(APIENTRY *PFN_msSplitGetNumPoints)(ms::SplitData *_this);
    typedef int(APIENTRY *PFN_msSplitGetNumIndices)(ms::SplitData *_this);
    typedef int(APIENTRY *PFN_msSplitGetNumSubmeshes)(ms::SplitData *_this);
    typedef ms::SubmeshData *(APIENTRY *PFN_msSplitGetSubmesh)(ms::SplitData *_this, int i);
    typedef int(APIENTRY *PFN_msSubmeshGetNumIndices)(ms::SubmeshData *_this);
    typedef int(APIENTRY *PFN_msSubmeshGetMaterialID)(ms::SubmeshData *_this);
    typedef void(APIENTRY *PFN_msSubmeshReadIndices)(ms::SubmeshData *_this, int *dst);
    typedef const char *(APIENTRY *PFN_msBlendShapeGetName)(ms::BlendShapeData *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msBlendShapeGetWeight)(ms::BlendShapeData *_this);
    typedef int(APIENTRY *PFN_msBlendShapeGetNumFrames)(ms::BlendShapeData *_this);
    typedef nanoem_f32_t(APIENTRY *PFN_msBlendShapeGetFrameWeight)(ms::BlendShapeData *_this, int f);
    typedef void(APIENTRY *PFN_msBlendShapeReadPoints)(
        ms::BlendShapeData *_this, int f, nanoem_f32_t3 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msBlendShapeReadNormals)(
        ms::BlendShapeData *_this, int f, nanoem_f32_t3 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msBlendShapeReadTangents)(
        ms::BlendShapeData *_this, int f, nanoem_f32_t3 *dst, ms::SplitData *split);
    typedef void(APIENTRY *PFN_msBlendShapeAddFrame)(ms::BlendShapeData *_this, nanoem_f32_t weight, int num,
        const nanoem_f32_t3 *v, const nanoem_f32_t3 *n, const nanoem_f32_t3 *t);
    typedef const char *(APIENTRY *PFN_msSceneGetName)(ms::Scene *_this);
    typedef int(APIENTRY *PFN_msSceneGetNumMeshes)(ms::Scene *_this);
    typedef ms::Mesh *(APIENTRY *PFN_msSceneGetMeshData)(ms::Scene *_this, int i);
    typedef int(APIENTRY *PFN_msSceneGetNumTransforms)(ms::Scene *_this);
    typedef ms::Transform *(APIENTRY *PFN_msSceneGetTransformData)(ms::Scene *_this, int i);
    typedef int(APIENTRY *PFN_msSceneGetNumCameras)(ms::Scene *_this);
    typedef ms::Camera *(APIENTRY *PFN_msSceneGetCameraData)(ms::Scene *_this, int i);
    typedef int(APIENTRY *PFN_msSceneGetNumLights)(ms::Scene *_this);
    typedef ms::Light *(APIENTRY *PFN_msSceneGetLightData)(ms::Scene *_this, int i);
    typedef int(APIENTRY *PFN_msSceneGetNumMaterials)(ms::Scene *_this);
    typedef ms::Material *(APIENTRY *PFN_msSceneGetMaterialData)(ms::Scene *_this, int i);

    ms::Server *m_server;
    PFN_msServerStart _msServerStart;
    PFN_msServerStop _msServerStop;
    PFN_msServerGetNumMessages _msServerGetNumMessages;
    PFN_msServerProcessMessages _msServerProcessMessages;
    PFN_msServerBeginServe _msServerBeginServe;
    PFN_msServerEndServe _msServerEndServe;
    PFN_msServerServeTransform _msServerServeTransform;
    PFN_msServerServeCamera _msServerServeCamera;
    PFN_msServerServeLight _msServerServeLight;
    PFN_msServerServeMesh _msServerServeMesh;
    PFN_msServerServeMaterial _msServerServeMaterial;
    PFN_msServerSetScreenshotFilePath _msServerSetScreenshotFilePath;
    PFN_msGetGetBakeSkin _msGetGetBakeSkin;
    PFN_msGetGetBakeCloth _msGetGetBakeCloth;
    PFN_msSetGetSceneData _msSetGetSceneData;
    PFN_msMaterialCreate _msMaterialCreate;
    PFN_msMaterialGetID _msMaterialGetID;
    PFN_msMaterialSetID _msMaterialSetID;
    PFN_msMaterialGetName _msMaterialGetName;
    PFN_msMaterialSetName _msMaterialSetName;
    PFN_msMaterialGetColor _msMaterialGetColor;
    PFN_msMaterialSetColor _msMaterialSetColor;
    PFN_msAnimationAsTransform _msAnimationAsTransform;
    PFN_msAnimationAsCamera _msAnimationAsCamera;
    PFN_msAnimationAsLight _msAnimationAsLight;
    PFN_msTransformAGetNumTranslationSamples _msTransformAGetNumTranslationSamples;
    PFN_msTransformAGetTranslationTime _msTransformAGetTranslationTime;
    PFN_msTransformAGetTranslationValue _msTransformAGetTranslationValue;
    PFN_msTransformAGetNumRotationSamples _msTransformAGetNumRotationSamples;
    PFN_msTransformAGetRotationTime _msTransformAGetRotationTime;
    PFN_msTransformAGetRotationValue _msTransformAGetRotationValue;
    PFN_msTransformAGetNumScaleSamples _msTransformAGetNumScaleSamples;
    PFN_msTransformAGetScaleTime _msTransformAGetScaleTime;
    PFN_msTransformAGetScaleValue _msTransformAGetScaleValue;
    PFN_msTransformAGetNumVisibleSamples _msTransformAGetNumVisibleSamples;
    PFN_msTransformAGetVisibleTime _msTransformAGetVisibleTime;
    PFN_msTransformAGetVisibleValue _msTransformAGetVisibleValue;
    PFN_msCameraAGetNumFovSamples _msCameraAGetNumFovSamples;
    PFN_msCameraAGetFovTime _msCameraAGetFovTime;
    PFN_msCameraAGetFovValue _msCameraAGetFovValue;
    PFN_msCameraAGetNumNearSamples _msCameraAGetNumNearSamples;
    PFN_msCameraAGetNearTime _msCameraAGetNearTime;
    PFN_msCameraAGetNearValue _msCameraAGetNearValue;
    PFN_msCameraAGetNumFarSamples _msCameraAGetNumFarSamples;
    PFN_msCameraAGetFarTime _msCameraAGetFarTime;
    PFN_msCameraAGetFarValue _msCameraAGetFarValue;
    PFN_msCameraAGetNumHApertureSamples _msCameraAGetNumHApertureSamples;
    PFN_msCameraAGetHApertureTime _msCameraAGetHApertureTime;
    PFN_msCameraAGetHApertureValue _msCameraAGetHApertureValue;
    PFN_msCameraAGetNumVApertureSamples _msCameraAGetNumVApertureSamples;
    PFN_msCameraAGetVApertureTime _msCameraAGetVApertureTime;
    PFN_msCameraAGetVApertureValue _msCameraAGetVApertureValue;
    PFN_msCameraAGetNumFocalLengthSamples _msCameraAGetNumFocalLengthSamples;
    PFN_msCameraAGetFocalLengthTime _msCameraAGetFocalLengthTime;
    PFN_msCameraAGetFocalLengthValue _msCameraAGetFocalLengthValue;
    PFN_msCameraAGetNumFocusDistanceSamples _msCameraAGetNumFocusDistanceSamples;
    PFN_msCameraAGetFocusDistanceTime _msCameraAGetFocusDistanceTime;
    PFN_msCameraAGetFocusDistanceValue _msCameraAGetFocusDistanceValue;
    PFN_msLightAGetNumColorSamples _msLightAGetNumColorSamples;
    PFN_msLightAGetColorTime _msLightAGetColorTime;
    PFN_msLightAGetColorValue _msLightAGetColorValue;
    PFN_msLightAGetNumIntensitySamples _msLightAGetNumIntensitySamples;
    PFN_msLightAGetIntensityTime _msLightAGetIntensityTime;
    PFN_msLightAGetIntensityValue _msLightAGetIntensityValue;
    PFN_msLightAGetNumRangeSamples _msLightAGetNumRangeSamples;
    PFN_msLightAGetRangeTime _msLightAGetRangeTime;
    PFN_msLightAGetRangeValue _msLightAGetRangeValue;
    PFN_msLightAGetNumSpotAngleSamples _msLightAGetNumSpotAngleSamples;
    PFN_msLightAGetSpotAngleTime _msLightAGetSpotAngleTime;
    PFN_msLightAGetSpotAngleValue _msLightAGetSpotAngleValue;
    PFN_msGetGetFlags _msGetGetFlags;
    PFN_msDeleteGetNumTargets _msDeleteGetNumTargets;
    PFN_msDeleteGetPath _msDeleteGetPath;
    PFN_msDeleteGetID _msDeleteGetID;
    PFN_msFenceGetType _msFenceGetType;
    PFN_msTextGetText _msTextGetText;
    PFN_msTextGetType _msTextGetType;
    PFN_msTransformCreate _msTransformCreate;
    PFN_msTransformGetID _msTransformGetID;
    PFN_msTransformSetID _msTransformSetID;
    PFN_msTransformGetIndex _msTransformGetIndex;
    PFN_msTransformSetIndex _msTransformSetIndex;
    PFN_msTransformGetPath _msTransformGetPath;
    PFN_msTransformSetPath _msTransformSetPath;
    PFN_msTransformGetPosition _msTransformGetPosition;
    PFN_msTransformSetPosition _msTransformSetPosition;
    PFN_msTransformGetRotation _msTransformGetRotation;
    PFN_msTransformSetRotation _msTransformSetRotation;
    PFN_msTransformGetScale _msTransformGetScale;
    PFN_msTransformSetScale _msTransformSetScale;
    PFN_msTransformGetVisible _msTransformGetVisible;
    PFN_msTransformSetVisible _msTransformSetVisible;
    PFN_msTransformGetReference _msTransformGetReference;
    PFN_msTransformSetReference _msTransformSetReference;
    PFN_msTransformGetAnimation _msTransformGetAnimation;
    PFN_msCameraCreate _msCameraCreate;
    PFN_msCameraIsOrtho _msCameraIsOrtho;
    PFN_msCameraSetOrtho _msCameraSetOrtho;
    PFN_msCameraGetFov _msCameraGetFov;
    PFN_msCameraSetFov _msCameraSetFov;
    PFN_msCameraGetNearPlane _msCameraGetNearPlane;
    PFN_msCameraSetNearPlane _msCameraSetNearPlane;
    PFN_msCameraGetFarPlane _msCameraGetFarPlane;
    PFN_msCameraSetFarPlane _msCameraSetFarPlane;
    PFN_msCameraGetHorizontalAperture _msCameraGetHorizontalAperture;
    PFN_msCameraSetHorizontalAperture _msCameraSetHorizontalAperture;
    PFN_msCameraGetVerticalAperture _msCameraGetVerticalAperture;
    PFN_msCameraSetVerticalAperture _msCameraSetVerticalAperture;
    PFN_msCameraGetFocalLength _msCameraGetFocalLength;
    PFN_msCameraSetFocalLength _msCameraSetFocalLength;
    PFN_msCameraGetFocusDistance _msCameraGetFocusDistance;
    PFN_msCameraSetFocusDistance _msCameraSetFocusDistance;
    PFN_msLightCreate _msLightCreate;
    PFN_msLightGetType _msLightGetType;
    PFN_msLightSetType _msLightSetType;
    PFN_msLightGetColor _msLightGetColor;
    PFN_msLightSetColor _msLightSetColor;
    PFN_msLightGetIntensity _msLightGetIntensity;
    PFN_msLightSetIntensity _msLightSetIntensity;
    PFN_msLightGetRange _msLightGetRange;
    PFN_msLightSetRange _msLightSetRange;
    PFN_msLightGetSpotAngle _msLightGetSpotAngle;
    PFN_msLightSetSpotAngle _msLightSetSpotAngle;
    PFN_msMeshCreate _msMeshCreate;
    PFN_msMeshGetFlags _msMeshGetFlags;
    PFN_msMeshSetFlags _msMeshSetFlags;
    PFN_msMeshGetNumPoints _msMeshGetNumPoints;
    PFN_msMeshGetNumIndices _msMeshGetNumIndices;
    PFN_msMeshGetNumSplits _msMeshGetNumSplits;
    PFN_msMeshReadPoints _msMeshReadPoints;
    PFN_msMeshWritePoints _msMeshWritePoints;
    PFN_msMeshReadNormals _msMeshReadNormals;
    PFN_msMeshWriteNormals _msMeshWriteNormals;
    PFN_msMeshReadTangents _msMeshReadTangents;
    PFN_msMeshWriteTangents _msMeshWriteTangents;
    PFN_msMeshReadUV0 _msMeshReadUV0;
    PFN_msMeshReadUV1 _msMeshReadUV1;
    PFN_msMeshWriteUV0 _msMeshWriteUV0;
    PFN_msMeshWriteUV1 _msMeshWriteUV1;
    PFN_msMeshReadColors _msMeshReadColors;
    PFN_msMeshWriteColors _msMeshWriteColors;
    PFN_msMeshReadIndices _msMeshReadIndices;
    PFN_msMeshWriteIndices _msMeshWriteIndices;
    PFN_msMeshWriteSubmeshTriangles _msMeshWriteSubmeshTriangles;
    PFN_msMeshGetSplit _msMeshGetSplit;
    PFN_msMeshGetNumSubmeshes _msMeshGetNumSubmeshes;
    PFN_msMeshGetSubmesh _msMeshGetSubmesh;
    PFN_msMeshReadWeights4 _msMeshReadWeights4;
    PFN_msMeshWriteWeights4 _msMeshWriteWeights4;
    PFN_msMeshGetNumBones _msMeshGetNumBones;
    PFN_msMeshGetRootBonePath _msMeshGetRootBonePath;
    PFN_msMeshSetRootBonePath _msMeshSetRootBonePath;
    PFN_msMeshGetBonePath _msMeshGetBonePath;
    PFN_msMeshSetBonePath _msMeshSetBonePath;
    PFN_msMeshReadBindPoses _msMeshReadBindPoses;
    PFN_msMeshWriteBindPoses _msMeshWriteBindPoses;
    PFN_msMeshGetNumBlendShapes _msMeshGetNumBlendShapes;
    PFN_msMeshGetBlendShapeData _msMeshGetBlendShapeData;
    PFN_msMeshAddBlendShape _msMeshAddBlendShape;
    PFN_msMeshSetLocal2World _msMeshSetLocal2World;
    PFN_msMeshSetWorld2Local _msMeshSetWorld2Local;
    PFN_msSplitGetNumPoints _msSplitGetNumPoints;
    PFN_msSplitGetNumIndices _msSplitGetNumIndices;
    PFN_msSplitGetNumSubmeshes _msSplitGetNumSubmeshes;
    PFN_msSplitGetSubmesh _msSplitGetSubmesh;
    PFN_msSubmeshGetNumIndices _msSubmeshGetNumIndices;
    PFN_msSubmeshGetMaterialID _msSubmeshGetMaterialID;
    PFN_msSubmeshReadIndices _msSubmeshReadIndices;
    PFN_msBlendShapeGetName _msBlendShapeGetName;
    PFN_msBlendShapeGetWeight _msBlendShapeGetWeight;
    PFN_msBlendShapeGetNumFrames _msBlendShapeGetNumFrames;
    PFN_msBlendShapeGetFrameWeight _msBlendShapeGetFrameWeight;
    PFN_msBlendShapeReadPoints _msBlendShapeReadPoints;
    PFN_msBlendShapeReadNormals _msBlendShapeReadNormals;
    PFN_msBlendShapeReadTangents _msBlendShapeReadTangents;
    PFN_msBlendShapeAddFrame _msBlendShapeAddFrame;
    PFN_msSceneGetName _msSceneGetName;
    PFN_msSceneGetNumMeshes _msSceneGetNumMeshes;
    PFN_msSceneGetMeshData _msSceneGetMeshData;
    PFN_msSceneGetNumTransforms _msSceneGetNumTransforms;
    PFN_msSceneGetTransformData _msSceneGetTransformData;
    PFN_msSceneGetNumCameras _msSceneGetNumCameras;
    PFN_msSceneGetCameraData _msSceneGetCameraData;
    PFN_msSceneGetNumLights _msSceneGetNumLights;
    PFN_msSceneGetLightData _msSceneGetLightData;
    PFN_msSceneGetNumMaterials _msSceneGetNumMaterials;
    PFN_msSceneGetMaterialData _msSceneGetMaterialData;
};

} /* namespace plugin */
} /* namespace nanoem */

#if 0
msAPI ms::Server* msServerStart(const ms::ServerSettings *settings);
msAPI void msServerStop(ms::Server *server);
msAPI int msServerGetNumMessages(ms::Server *server);
msAPI int msServerProcessMessages(ms::Server *server, msMessageHandler handler);
msAPI void msServerBeginServe(ms::Server *server);
msAPI void msServerEndServe(ms::Server *server);
msAPI void msServerServeTransform(ms::Server *server, ms::Transform *data);
msAPI void msServerServeCamera(ms::Server *server, ms::Camera *data);
msAPI void msServerServeLight(ms::Server *server, ms::Light *data);
msAPI void msServerServeMesh(ms::Server *server, ms::Mesh *data);
msAPI void msServerServeMaterial(ms::Server *server, ms::Material *data);
msAPI void msServerSetScreenshotFilePath(ms::Server *server, const char *path);
msAPI int msGetGetBakeSkin(ms::GetMessage *_this);
msAPI int msGetGetBakeCloth(ms::GetMessage *_this);
msAPI ms::Scene* msSetGetSceneData(ms::SetMessage *_this);
msAPI ms::Material* msMaterialCreate();
msAPI int msMaterialGetID(ms::Material *_this);
msAPI void msMaterialSetID(ms::Material *_this, int v);
msAPI const char* msMaterialGetName(ms::Material *_this);
msAPI void msMaterialSetName(ms::Material *_this, const char *v);
msAPI nanoem_f32_t4 msMaterialGetColor(ms::Material *_this);
msAPI void msMaterialSetColor(ms::Material *_this, const nanoem_f32_t4 *v);
msAPI ms::TransformAnimation* msAnimationAsTransform(ms::Animation *_this);
msAPI ms::CameraAnimation* msAnimationAsCamera(ms::Animation *_this);
msAPI ms::LightAnimation* msAnimationAsLight(ms::Animation *_this);
msAPI int msTransformAGetNumTranslationSamples(ms::TransformAnimation *_this);
msAPI nanoem_f32_t msTransformAGetTranslationTime(ms::TransformAnimation *_this, int i);
msAPI nanoem_f32_t3 msTransformAGetTranslationValue(ms::TransformAnimation *_this, int i);
msAPI int msTransformAGetNumRotationSamples(ms::TransformAnimation *_this);
msAPI nanoem_f32_t msTransformAGetRotationTime(ms::TransformAnimation *_this, int i);
msAPI quatf msTransformAGetRotationValue(ms::TransformAnimation *_this, int i);
msAPI int msTransformAGetNumScaleSamples(ms::TransformAnimation *_this);
msAPI nanoem_f32_t msTransformAGetScaleTime(ms::TransformAnimation *_this, int i);
msAPI nanoem_f32_t3 msTransformAGetScaleValue(ms::TransformAnimation *_this, int i);
msAPI int msTransformAGetNumVisibleSamples(ms::TransformAnimation *_this);
msAPI nanoem_f32_t msTransformAGetVisibleTime(ms::TransformAnimation *_this, int i);
msAPI bool msTransformAGetVisibleValue(ms::TransformAnimation *_this, int i);
msAPI int msCameraAGetNumFovSamples(ms::CameraAnimation *_this);
msAPI nanoem_f32_t msCameraAGetFovTime(ms::CameraAnimation *_this, int i);
msAPI nanoem_f32_t msCameraAGetFovValue(ms::CameraAnimation *_this, int i);
msAPI int msCameraAGetNumNearSamples(ms::CameraAnimation *_this);
msAPI nanoem_f32_t msCameraAGetNearTime(ms::CameraAnimation *_this, int i);
msAPI nanoem_f32_t msCameraAGetNearValue(ms::CameraAnimation *_this, int i);
msAPI int msCameraAGetNumFarSamples(ms::CameraAnimation *_this);
msAPI nanoem_f32_t msCameraAGetFarTime(ms::CameraAnimation *_this, int i);
msAPI nanoem_f32_t msCameraAGetFarValue(ms::CameraAnimation *_this, int i);
msAPI int msCameraAGetNumHApertureSamples(ms::CameraAnimation *_this);
msAPI nanoem_f32_t msCameraAGetHApertureTime(ms::CameraAnimation *_this, int i);
msAPI nanoem_f32_t msCameraAGetHApertureValue(ms::CameraAnimation *_this, int i);
msAPI int msCameraAGetNumVApertureSamples(ms::CameraAnimation *_this);
msAPI nanoem_f32_t msCameraAGetVApertureTime(ms::CameraAnimation *_this, int i);
msAPI nanoem_f32_t msCameraAGetVApertureValue(ms::CameraAnimation *_this, int i);
msAPI int msCameraAGetNumFocalLengthSamples(ms::CameraAnimation *_this);
msAPI nanoem_f32_t msCameraAGetFocalLengthTime(ms::CameraAnimation *_this, int i);
msAPI nanoem_f32_t msCameraAGetFocalLengthValue(ms::CameraAnimation *_this, int i);
msAPI int msCameraAGetNumFocusDistanceSamples(ms::CameraAnimation *_this);
msAPI nanoem_f32_t msCameraAGetFocusDistanceTime(ms::CameraAnimation *_this, int i);
msAPI nanoem_f32_t msCameraAGetFocusDistanceValue(ms::CameraAnimation *_this, int i);
msAPI int msLightAGetNumColorSamples(ms::LightAnimation *_this);
msAPI nanoem_f32_t msLightAGetColorTime(ms::LightAnimation *_this, int i);
msAPI nanoem_f32_t4 msLightAGetColorValue(ms::LightAnimation *_this, int i);
msAPI int msLightAGetNumIntensitySamples(ms::LightAnimation *_this);
msAPI nanoem_f32_t msLightAGetIntensityTime(ms::LightAnimation *_this, int i);
msAPI nanoem_f32_t msLightAGetIntensityValue(ms::LightAnimation *_this, int i);
msAPI int msLightAGetNumRangeSamples(ms::LightAnimation *_this);
msAPI nanoem_f32_t msLightAGetRangeTime(ms::LightAnimation *_this, int i);
msAPI nanoem_f32_t msLightAGetRangeValue(ms::LightAnimation *_this, int i);
msAPI int msLightAGetNumSpotAngleSamples(ms::LightAnimation *_this);
msAPI nanoem_f32_t msLightAGetSpotAngleTime(ms::LightAnimation *_this, int i);
msAPI nanoem_f32_t msLightAGetSpotAngleValue(ms::LightAnimation *_this, int i);
msAPI ms::GetFlags msGetGetFlags(ms::GetMessage *_this);
msAPI int msDeleteGetNumTargets(ms::DeleteMessage *_this);
msAPI const char* msDeleteGetPath(ms::DeleteMessage *_this, int i);
msAPI int msDeleteGetID(ms::DeleteMessage *_this, int i);
msAPI ms::FenceMessage::FenceType msFenceGetType(ms::FenceMessage *_this);
msAPI const char* msTextGetText(ms::TextMessage *_this);
msAPI ms::TextMessage::Type msTextGetType(ms::TextMessage *_this);
msAPI ms::Transform* msTransformCreate();
msAPI int msTransformGetID(ms::Transform *_this);
msAPI void msTransformSetID(ms::Transform *_this, int v);
msAPI int msTransformGetIndex(ms::Transform *_this);
msAPI void msTransformSetIndex(ms::Transform *_this, int v);
msAPI const char* msTransformGetPath(ms::Transform *_this);
msAPI void msTransformSetPath(ms::Transform *_this, const char *v);
msAPI nanoem_f32_t3 msTransformGetPosition(ms::Transform *_this);
msAPI void msTransformSetPosition(ms::Transform *_this, nanoem_f32_t3 v);
msAPI quatf msTransformGetRotation(ms::Transform *_this);
msAPI void msTransformSetRotation(ms::Transform *_this, quatf v);
msAPI nanoem_f32_t3 msTransformGetScale(ms::Transform *_this);
msAPI void msTransformSetScale(ms::Transform *_this, nanoem_f32_t3 v);
msAPI bool msTransformGetVisible(ms::Transform *_this);
msAPI void msTransformSetVisible(ms::Transform *_this, bool v);
msAPI const char* msTransformGetReference(ms::Transform *_this);
msAPI void msTransformSetReference(ms::Transform *_this, const char *v);
msAPI ms::Animation* msTransformGetAnimation(ms::Transform *_this);
msAPI ms::Camera* msCameraCreate();
msAPI bool msCameraIsOrtho(ms::Camera *_this);
msAPI void msCameraSetOrtho(ms::Camera *_this, bool v);
msAPI nanoem_f32_t msCameraGetFov(ms::Camera *_this);
msAPI void msCameraSetFov(ms::Camera *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msCameraGetNearPlane(ms::Camera *_this);
msAPI void msCameraSetNearPlane(ms::Camera *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msCameraGetFarPlane(ms::Camera *_this);
msAPI void msCameraSetFarPlane(ms::Camera *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msCameraGetHorizontalAperture(ms::Camera *_this);
msAPI void msCameraSetHorizontalAperture(ms::Camera *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msCameraGetVerticalAperture(ms::Camera *_this);
msAPI void msCameraSetVerticalAperture(ms::Camera *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msCameraGetFocalLength(ms::Camera *_this);
msAPI void msCameraSetFocalLength(ms::Camera *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msCameraGetFocusDistance(ms::Camera *_this);
msAPI void msCameraSetFocusDistance(ms::Camera *_this, nanoem_f32_t v);
msAPI ms::Light* msLightCreate();
msAPI ms::Light::Type msLightGetType(ms::Light *_this);
msAPI void msLightSetType(ms::Light *_this, ms::Light::Type v);
msAPI nanoem_f32_t4 msLightGetColor(ms::Light *_this);
msAPI void msLightSetColor(ms::Light *_this, nanoem_f32_t4 v);
msAPI nanoem_f32_t msLightGetIntensity(ms::Light *_this);
msAPI void msLightSetIntensity(ms::Light *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msLightGetRange(ms::Light *_this);
msAPI void msLightSetRange(ms::Light *_this, nanoem_f32_t v);
msAPI nanoem_f32_t msLightGetSpotAngle(ms::Light *_this);
msAPI void msLightSetSpotAngle(ms::Light *_this, nanoem_f32_t v);
msAPI ms::Mesh* msMeshCreate();
msAPI ms::MeshDataFlags msMeshGetFlags(ms::Mesh *_this);
msAPI void msMeshSetFlags(ms::Mesh *_this, ms::MeshDataFlags v);
msAPI int msMeshGetNumPoints(ms::Mesh *_this);
msAPI int msMeshGetNumIndices(ms::Mesh *_this);
msAPI int msMeshGetNumSplits(ms::Mesh *_this);
msAPI void msMeshReadPoints(ms::Mesh *_this, nanoem_f32_t3 *dst, ms::SplitData *split);
msAPI void msMeshWritePoints(ms::Mesh *_this, const nanoem_f32_t3 *v, int size);
msAPI void msMeshReadNormals(ms::Mesh *_this, nanoem_f32_t3 *dst, ms::SplitData *split);
msAPI void msMeshWriteNormals(ms::Mesh *_this, const nanoem_f32_t3 *v, int size);
msAPI void msMeshReadTangents(ms::Mesh *_this, nanoem_f32_t4 *dst, ms::SplitData *split);
msAPI void msMeshWriteTangents(ms::Mesh *_this, const nanoem_f32_t4 *v, int size);
msAPI void msMeshReadUV0(ms::Mesh *_this, nanoem_f32_t2 *dst, ms::SplitData *split);
msAPI void msMeshReadUV1(ms::Mesh *_this, nanoem_f32_t2 *dst, ms::SplitData *split);
msAPI void msMeshWriteUV0(ms::Mesh *_this, const nanoem_f32_t2 *v, int size);
msAPI void msMeshWriteUV1(ms::Mesh *_this, const nanoem_f32_t2 *v, int size);
msAPI void msMeshReadColors(ms::Mesh *_this, nanoem_f32_t4 *dst, ms::SplitData *split);
msAPI void msMeshWriteColors(ms::Mesh *_this, const nanoem_f32_t4 *v, int size);
msAPI void msMeshReadIndices(ms::Mesh *_this, int *dst, ms::SplitData *split);
msAPI void msMeshWriteIndices(ms::Mesh *_this, const int *v, int size);
msAPI void msMeshWriteSubmeshTriangles(ms::Mesh *_this, const int *v, int size, int materialID);
msAPI ms::SplitData* msMeshGetSplit(ms::Mesh *_this, int i);
msAPI int msMeshGetNumSubmeshes(ms::Mesh *_this);
msAPI ms::SubmeshData* msMeshGetSubmesh(ms::Mesh *_this, int i);
msAPI void msMeshReadWeights4(ms::Mesh *_this, ms::Weights4 *dst, ms::SplitData *split);
msAPI void msMeshWriteWeights4(ms::Mesh *_this, const ms::Weights4 *v, int size);
msAPI int msMeshGetNumBones(ms::Mesh *_this);
msAPI const char* msMeshGetRootBonePath(ms::Mesh *_this);
msAPI void msMeshSetRootBonePath(ms::Mesh *_this, const char *v);
msAPI const char* msMeshGetBonePath(ms::Mesh *_this, int i);
msAPI void msMeshSetBonePath(ms::Mesh *_this, const char *v, int i);
msAPI void msMeshReadBindPoses(ms::Mesh *_this, nanoem_f32_t4x4 *v);
msAPI void msMeshWriteBindPoses(ms::Mesh *_this, const nanoem_f32_t4x4 *v, int size);
msAPI int msMeshGetNumBlendShapes(ms::Mesh *_this);
msAPI ms::BlendShapeData* msMeshGetBlendShapeData(ms::Mesh *_this, int i);
msAPI ms::BlendShapeData* msMeshAddBlendShape(ms::Mesh *_this, const char *name);
msAPI void msMeshSetLocal2World(ms::Mesh *_this, const nanoem_f32_t4x4 *v);
msAPI void msMeshSetWorld2Local(ms::Mesh *_this, const nanoem_f32_t4x4 *v);
msAPI int msSplitGetNumPoints(ms::SplitData *_this);
msAPI int msSplitGetNumIndices(ms::SplitData *_this);
msAPI int msSplitGetNumSubmeshes(ms::SplitData *_this);
msAPI ms::SubmeshData* msSplitGetSubmesh(ms::SplitData *_this, int i);
msAPI int msSubmeshGetNumIndices(ms::SubmeshData *_this);
msAPI int msSubmeshGetMaterialID(ms::SubmeshData *_this);
msAPI void msSubmeshReadIndices(ms::SubmeshData *_this, int *dst);
msAPI const char* msBlendShapeGetName(ms::BlendShapeData *_this);
msAPI nanoem_f32_t msBlendShapeGetWeight(ms::BlendShapeData *_this);
msAPI int msBlendShapeGetNumFrames(ms::BlendShapeData *_this);
msAPI nanoem_f32_t msBlendShapeGetFrameWeight(ms::BlendShapeData *_this, int f);
msAPI void msBlendShapeReadPoints(ms::BlendShapeData *_this, int f, nanoem_f32_t3 *dst, ms::SplitData *split);
msAPI void msBlendShapeReadNormals(ms::BlendShapeData *_this, int f, nanoem_f32_t3 *dst, ms::SplitData *split);
msAPI void msBlendShapeReadTangents(ms::BlendShapeData *_this, int f, nanoem_f32_t3 *dst, ms::SplitData *split);
msAPI void msBlendShapeAddFrame(ms::BlendShapeData *_this, nanoem_f32_t weight, int num, const nanoem_f32_t3 *v, const nanoem_f32_t3 *n, const nanoem_f32_t3 *t);
msAPI const char* msSceneGetName(ms::Scene *_this);
msAPI int msSceneGetNumMeshes(ms::Scene *_this);
msAPI ms::Mesh* msSceneGetMeshData(ms::Scene *_this, int i);
msAPI int msSceneGetNumTransforms(ms::Scene *_this);
msAPI ms::Transform* msSceneGetTransformData(ms::Scene *_this, int i);
msAPI int msSceneGetNumCameras(ms::Scene *_this);
msAPI ms::Camera* msSceneGetCameraData(ms::Scene *_this, int i);
msAPI int msSceneGetNumLights(ms::Scene *_this);
msAPI ms::Light* msSceneGetLightData(ms::Scene *_this, int i);
msAPI int msSceneGetNumMaterials(ms::Scene *_this);
msAPI ms::Material* msSceneGetMaterialData(ms::Scene *_this, int i);
#endif

#endif /* NANOEM_EMAPP_PLUGIN_MESHSYNCPLUGIN_H_ */
