/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common.proto */

#ifndef PROTOBUF_C_common_2eproto__INCLUDED
#define PROTOBUF_C_common_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Nanoem__Common__Annotation Nanoem__Common__Annotation;
typedef struct Nanoem__Common__Vector3 Nanoem__Common__Vector3;
typedef struct Nanoem__Common__Vector4 Nanoem__Common__Vector4;
typedef struct Nanoem__Common__Color Nanoem__Common__Color;
typedef struct Nanoem__Common__Quaternion Nanoem__Common__Quaternion;
typedef struct Nanoem__Common__Interpolation Nanoem__Common__Interpolation;
typedef struct Nanoem__Common__Point Nanoem__Common__Point;
typedef struct Nanoem__Common__Size Nanoem__Common__Size;
typedef struct Nanoem__Common__Rect Nanoem__Common__Rect;
typedef struct Nanoem__Common__Rational Nanoem__Common__Rational;


/* --- enums --- */

typedef enum _Nanoem__Common__Language {
  NANOEM__COMMON__LANGUAGE__LC_UNKNOWN = 0,
  NANOEM__COMMON__LANGUAGE__LC_JAPANESE = 1,
  NANOEM__COMMON__LANGUAGE__LC_ENGLISH = 2,
  NANOEM__COMMON__LANGUAGE__LC_SIMPLIFIED_CHINESE = 3,
  NANOEM__COMMON__LANGUAGE__LC_TRADITIONAL_CHINESE = 4,
  NANOEM__COMMON__LANGUAGE__LC_KOREAN = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NANOEM__COMMON__LANGUAGE)
} Nanoem__Common__Language;

/* --- messages --- */

struct  Nanoem__Common__Annotation
{
  ProtobufCMessage base;
  char *name;
  char *value;
};
#define NANOEM__COMMON__ANNOTATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__annotation__descriptor) \
, NULL, NULL }


struct  Nanoem__Common__Vector3
{
  ProtobufCMessage base;
  float x;
  float y;
  float z;
};
#define NANOEM__COMMON__VECTOR3__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__vector3__descriptor) \
, 0, 0, 0 }


struct  Nanoem__Common__Vector4
{
  ProtobufCMessage base;
  float x;
  float y;
  float z;
  float w;
};
#define NANOEM__COMMON__VECTOR4__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__vector4__descriptor) \
, 0, 0, 0, 0 }


struct  Nanoem__Common__Color
{
  ProtobufCMessage base;
  float red;
  float green;
  float blue;
  float alpha;
};
#define NANOEM__COMMON__COLOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__color__descriptor) \
, 0, 0, 0, 0 }


struct  Nanoem__Common__Quaternion
{
  ProtobufCMessage base;
  float x;
  float y;
  float z;
  float w;
};
#define NANOEM__COMMON__QUATERNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__quaternion__descriptor) \
, 0, 0, 0, 0 }


struct  Nanoem__Common__Interpolation
{
  ProtobufCMessage base;
  int32_t x0;
  int32_t y0;
  int32_t x1;
  int32_t y1;
};
#define NANOEM__COMMON__INTERPOLATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__interpolation__descriptor) \
, 0, 0, 0, 0 }


struct  Nanoem__Common__Point
{
  ProtobufCMessage base;
  float x;
  float y;
};
#define NANOEM__COMMON__POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__point__descriptor) \
, 0, 0 }


struct  Nanoem__Common__Size
{
  ProtobufCMessage base;
  float width;
  float height;
};
#define NANOEM__COMMON__SIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__size__descriptor) \
, 0, 0 }


struct  Nanoem__Common__Rect
{
  ProtobufCMessage base;
  Nanoem__Common__Point *point;
  Nanoem__Common__Size *size;
};
#define NANOEM__COMMON__RECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__rect__descriptor) \
, NULL, NULL }


struct  Nanoem__Common__Rational
{
  ProtobufCMessage base;
  uint32_t denominator;
  uint64_t numerator;
};
#define NANOEM__COMMON__RATIONAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nanoem__common__rational__descriptor) \
, 0, 0 }


/* Nanoem__Common__Annotation methods */
void   nanoem__common__annotation__init
                     (Nanoem__Common__Annotation         *message);
size_t nanoem__common__annotation__get_packed_size
                     (const Nanoem__Common__Annotation   *message);
size_t nanoem__common__annotation__pack
                     (const Nanoem__Common__Annotation   *message,
                      uint8_t             *out);
size_t nanoem__common__annotation__pack_to_buffer
                     (const Nanoem__Common__Annotation   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Annotation *
       nanoem__common__annotation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__annotation__free_unpacked
                     (Nanoem__Common__Annotation *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Vector3 methods */
void   nanoem__common__vector3__init
                     (Nanoem__Common__Vector3         *message);
size_t nanoem__common__vector3__get_packed_size
                     (const Nanoem__Common__Vector3   *message);
size_t nanoem__common__vector3__pack
                     (const Nanoem__Common__Vector3   *message,
                      uint8_t             *out);
size_t nanoem__common__vector3__pack_to_buffer
                     (const Nanoem__Common__Vector3   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Vector3 *
       nanoem__common__vector3__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__vector3__free_unpacked
                     (Nanoem__Common__Vector3 *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Vector4 methods */
void   nanoem__common__vector4__init
                     (Nanoem__Common__Vector4         *message);
size_t nanoem__common__vector4__get_packed_size
                     (const Nanoem__Common__Vector4   *message);
size_t nanoem__common__vector4__pack
                     (const Nanoem__Common__Vector4   *message,
                      uint8_t             *out);
size_t nanoem__common__vector4__pack_to_buffer
                     (const Nanoem__Common__Vector4   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Vector4 *
       nanoem__common__vector4__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__vector4__free_unpacked
                     (Nanoem__Common__Vector4 *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Color methods */
void   nanoem__common__color__init
                     (Nanoem__Common__Color         *message);
size_t nanoem__common__color__get_packed_size
                     (const Nanoem__Common__Color   *message);
size_t nanoem__common__color__pack
                     (const Nanoem__Common__Color   *message,
                      uint8_t             *out);
size_t nanoem__common__color__pack_to_buffer
                     (const Nanoem__Common__Color   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Color *
       nanoem__common__color__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__color__free_unpacked
                     (Nanoem__Common__Color *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Quaternion methods */
void   nanoem__common__quaternion__init
                     (Nanoem__Common__Quaternion         *message);
size_t nanoem__common__quaternion__get_packed_size
                     (const Nanoem__Common__Quaternion   *message);
size_t nanoem__common__quaternion__pack
                     (const Nanoem__Common__Quaternion   *message,
                      uint8_t             *out);
size_t nanoem__common__quaternion__pack_to_buffer
                     (const Nanoem__Common__Quaternion   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Quaternion *
       nanoem__common__quaternion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__quaternion__free_unpacked
                     (Nanoem__Common__Quaternion *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Interpolation methods */
void   nanoem__common__interpolation__init
                     (Nanoem__Common__Interpolation         *message);
size_t nanoem__common__interpolation__get_packed_size
                     (const Nanoem__Common__Interpolation   *message);
size_t nanoem__common__interpolation__pack
                     (const Nanoem__Common__Interpolation   *message,
                      uint8_t             *out);
size_t nanoem__common__interpolation__pack_to_buffer
                     (const Nanoem__Common__Interpolation   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Interpolation *
       nanoem__common__interpolation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__interpolation__free_unpacked
                     (Nanoem__Common__Interpolation *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Point methods */
void   nanoem__common__point__init
                     (Nanoem__Common__Point         *message);
size_t nanoem__common__point__get_packed_size
                     (const Nanoem__Common__Point   *message);
size_t nanoem__common__point__pack
                     (const Nanoem__Common__Point   *message,
                      uint8_t             *out);
size_t nanoem__common__point__pack_to_buffer
                     (const Nanoem__Common__Point   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Point *
       nanoem__common__point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__point__free_unpacked
                     (Nanoem__Common__Point *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Size methods */
void   nanoem__common__size__init
                     (Nanoem__Common__Size         *message);
size_t nanoem__common__size__get_packed_size
                     (const Nanoem__Common__Size   *message);
size_t nanoem__common__size__pack
                     (const Nanoem__Common__Size   *message,
                      uint8_t             *out);
size_t nanoem__common__size__pack_to_buffer
                     (const Nanoem__Common__Size   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Size *
       nanoem__common__size__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__size__free_unpacked
                     (Nanoem__Common__Size *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Rect methods */
void   nanoem__common__rect__init
                     (Nanoem__Common__Rect         *message);
size_t nanoem__common__rect__get_packed_size
                     (const Nanoem__Common__Rect   *message);
size_t nanoem__common__rect__pack
                     (const Nanoem__Common__Rect   *message,
                      uint8_t             *out);
size_t nanoem__common__rect__pack_to_buffer
                     (const Nanoem__Common__Rect   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Rect *
       nanoem__common__rect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__rect__free_unpacked
                     (Nanoem__Common__Rect *message,
                      ProtobufCAllocator *allocator);
/* Nanoem__Common__Rational methods */
void   nanoem__common__rational__init
                     (Nanoem__Common__Rational         *message);
size_t nanoem__common__rational__get_packed_size
                     (const Nanoem__Common__Rational   *message);
size_t nanoem__common__rational__pack
                     (const Nanoem__Common__Rational   *message,
                      uint8_t             *out);
size_t nanoem__common__rational__pack_to_buffer
                     (const Nanoem__Common__Rational   *message,
                      ProtobufCBuffer     *buffer);
Nanoem__Common__Rational *
       nanoem__common__rational__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nanoem__common__rational__free_unpacked
                     (Nanoem__Common__Rational *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Nanoem__Common__Annotation_Closure)
                 (const Nanoem__Common__Annotation *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Vector3_Closure)
                 (const Nanoem__Common__Vector3 *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Vector4_Closure)
                 (const Nanoem__Common__Vector4 *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Color_Closure)
                 (const Nanoem__Common__Color *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Quaternion_Closure)
                 (const Nanoem__Common__Quaternion *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Interpolation_Closure)
                 (const Nanoem__Common__Interpolation *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Point_Closure)
                 (const Nanoem__Common__Point *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Size_Closure)
                 (const Nanoem__Common__Size *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Rect_Closure)
                 (const Nanoem__Common__Rect *message,
                  void *closure_data);
typedef void (*Nanoem__Common__Rational_Closure)
                 (const Nanoem__Common__Rational *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    nanoem__common__language__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__annotation__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__vector3__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__vector4__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__color__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__quaternion__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__interpolation__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__point__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__size__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__rect__descriptor;
extern const ProtobufCMessageDescriptor nanoem__common__rational__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_common_2eproto__INCLUDED */
